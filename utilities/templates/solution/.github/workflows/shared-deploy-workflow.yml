on:
  workflow_call:
    inputs:
      environment-name:
        type: string
        required: true
      solution-name:
        type: string
        required: true
      service-name:
        type: string
        required: true
      image-version:
        type: string
        required: true
      aks-resource-group:
        type: string
        required: true
      aks-name:
        type: string
        required: true
      aks-namespace:
        type: string
        required: true
      chart-registry:
        type: string
        required: true
      chart-name: 
        type: string
        required: true
      chart-version:
        type: string
        required: true
    secrets:
      NUGET_PACKAGE_TOKEN:
        required: true
      AZURE_CLIENT_ID:
        required: true
      AZURE_TENANT_ID:
        required: true
      AZURE_SUBSCRIPTION_ID:
        required: true
      APP_CONFIG_NAME:
        required: true
jobs:
  microservice:
    runs-on: ubuntu-latest
    environment: development
    steps:
    - name: Login to Azure
      uses: azure/login@v1
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    - name: Download Microservice Helm Settings
      uses: actions/download-artifact@v4
      with:
        name: microservice-helm-settings

    - name: List Downloaded Artifacts
      run: ls -R .

    - name: Log Into ACR
      run: az acr login --name ${{ inputs.chart-registry }}

    - name: Log Into AKS
      run: az aks get-credentials --resource-group ${{ inputs.aks-resource-group }} --name ${{ inputs.aks-name }}

        # App Configuration service associated with the Microservice solution.
    - name: Read Deploy Configurations
      uses: flcdrg/get-azure-app-configuration-action@v2
      id: app-configs
      with:
        resourceGroup: ${{ secrets.APP_CONFIG_GROUP }}
        appConfigurationName: ${{ secrets.APP_CONFIG_NAME }}
        keyFilter: 'SolutionTenantId,SolutionClientId,SolutionKeyVaultName,SolutionAppConfigEndpoint'

    - name: Set Deployment Date
      run: |
        echo "DEPLOYMENT_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> ${GITHUB_ENV}

    # Deploy Microservice and wait for all resources to be created.
    - name: Deploy Microservice Chart
      run: | 
        helm upgrade ${{ inputs.service-name }} oci://${{ inputs.chart-registry }}/${{ inputs.solution-name }}/charts/${{ inputs.chart-name }} \
          --install \
          --wait \
          --version ${{ inputs.chart-version }} \
          -n ${{ inputs.aks-namespace }} \
          --values common-values.yaml \
          --values ${{ inputs.environment-name }}-values.yaml \
          --set image.tag=${{ inputs.image-version }} \
          --set tenantId=${{ steps.app-configs.outputs.SolutionTenantId }} \
          --set managedIdentityClientId=${{ steps.app-configs.outputs.SolutionClientId }} \
          --set appConfigEndpoint=${{ steps.app-configs.outputs.SolutionAppConfigEndpoint }} \
          --set keyVaultName=${{ steps.app-configs.outputs.SolutionKeyVaultName }} 

    - name: Update Configuration Sentinel 
      run: |
        az appconfig kv set -n ${{ secrets.APP_CONFIG_NAME }} \
           --key ${{ inputs.service-name }}/update_sentinel \
           --value ${{ env.DEPLOYMENT_DATE }} \
           --yes
