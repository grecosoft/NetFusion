on:
  workflow_call:
    inputs:
      solution-name:
        type: string
        required: true
      service-name:
        type: string
        required: true
      docker-file-path:
        type: string
        required: true
      image-version:
        type: string
        required: true
      image-registry:
        type: string
        required: true
    secrets:
      NUGET_PACKAGE_TOKEN:
        required: true
      AZURE_CLIENT_ID:
        required: true
      AZURE_TENANT_ID:
        required: true
      AZURE_SUBSCRIPTION_ID:
        required: true
      APP_CONFIG_NAME:
        required: true

jobs:
  service-image:
    runs-on: ubuntu-latest
    environment: development
    steps: 
    - name: Checkout
      uses: actions/checkout@v3
      
    - name: Set Image Tag Variable
      run: |
        echo "TAGGED_IMAGE=${{ inputs.image-registry }}/${{ inputs.solution-name }}/${{ inputs.service-name }}:${{ inputs.image-version }}" >> $GITHUB_ENV
                
    - name: Build Microservice Image
      run: |
        docker build ${{ inputs.docker-file-path }} \
          --tag ${{ env.TAGGED_IMAGE }} \
          --build-arg="NUGET_USERNAME=${{ secrets.GITHUB_TOKEN }}" \
          --build-arg="NUGET_PASSWORD=${{ secrets.NUGET_PACKAGE_TOKEN }}"

    - name: List Images
      run: docker images

    - name: Login to Azure
      uses: azure/login@v1
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    - name: Log Into ACR
      run: az acr login --name ${{ inputs.image-registry }}

    - name: Push Image to Repository
      run: docker image push ${{ env.TAGGED_IMAGE }}

    - name: Archive Microservice Helm Settings  
      uses: actions/upload-artifact@v4
      with:
        name: microservice-helm-settings
        path: ${{ inputs.docker-file-path }}/deploy/*-values.yaml

    - name: Set Latest Build Version 
      run: |
        az appconfig kv set -n ${{ secrets.APP_CONFIG_NAME }} \
           --key ${{ inputs.service-name }}/latest_build \
           --value ${{ inputs.image-version }} \
           --yes
