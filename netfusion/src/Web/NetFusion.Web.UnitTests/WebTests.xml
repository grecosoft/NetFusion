<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NetFusion.Web.UnitTests</name>
    </assembly>
    <members>
        <member name="T:NetFusion.Web.UnitTests.Hosting.WebHostFixture">
            <summary>
            Class used to arrange a composite-container from which a composite-application
            running within a test-server can be tested by issuing HTTP calls.
            </summary>
        </member>
        <member name="M:NetFusion.Web.UnitTests.Hosting.WebHostFixture.TestAsync``1(System.Func{NetFusion.Web.UnitTests.Hosting.WebHostFixture,System.Threading.Tasks.Task})">
            <summary>
            Used to initialize and run an integration unit-test on a built in-memory web host.
            </summary>
            <param name="webHostTest">Delegate passed an instance of the WebHost that can be
            arranged and acted on.</param>
            <typeparam name="T">Reference to class contained within the unit-test from which
            controllers will be loaded.</typeparam>
            <returns></returns>
        </member>
        <member name="M:NetFusion.Web.UnitTests.Hosting.WebHostFixture.WithSettings(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Application settings to be added to the WebHost on which the unit-test will be executed.
            </summary>
            <param name="settings">Dictionary of settings to be added.</param>
            <returns></returns>
        </member>
        <member name="M:NetFusion.Web.UnitTests.Hosting.WebHostFixture.WithServices(System.Action{Microsoft.Extensions.DependencyInjection.IServiceCollection})">
            <summary>
            Service to be added to the WebHost on which the unit-test will be executed.
            </summary>
            <param name="services">The service-collection to add services.</param>
            <returns></returns>
        </member>
        <member name="M:NetFusion.Web.UnitTests.Hosting.WebHostFixture.ComposedFrom(System.Action{NetFusion.Core.Bootstrap.Container.ICompositeContainerBuilder})">
            <summary>
            Used to add the plugins form which the WebHost under test should be composed.
            </summary>
            <param name="compose"></param>
            <returns></returns>
        </member>
        <member name="T:NetFusion.Web.UnitTests.Hosting.WebServerAct">
            <summary>
            Provides method used to act on the create TestServer by executing web-requests.
            </summary>
        </member>
        <member name="M:NetFusion.Web.UnitTests.Hosting.WebServerAct.OnClient(System.Func{System.Net.Http.HttpClient,System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}})">
            <summary>
            Creates an HttpClient instance used to act on the TestService by sending requests.
            </summary>
            <param name="clientAct">Delegate passed the HttpClient to be acted on.</param>
            <returns>The WebServer response to be asserted.</returns>
        </member>
        <member name="M:NetFusion.Web.UnitTests.Hosting.WebServerAct.OnRestClient(System.Func{NetFusion.Web.Rest.Client.IRestClient,System.Threading.Tasks.Task{NetFusion.Web.Rest.Client.ApiResponse}})">
            <summary>
            Creates a Request-Client instance used to act on the TEstService by sending requests.
            </summary>
            <param name="clientAct">Delegate passed the IRequestClient to be acted on.</param>
            <returns>The WebServer response to be asserted.</returns>
        </member>
        <member name="T:NetFusion.Web.UnitTests.Hosting.WebServerAssert">
            <summary>
            Provides methods for asserting the request made to the TestServer.
            </summary>
        </member>
        <member name="M:NetFusion.Web.UnitTests.Hosting.WebServerAssert.HttpResponse(System.Action{System.Net.Http.HttpResponseMessage})">
            <summary>
            Allows the response issued with the HTTPClient to be asserted.
            </summary>
            <param name="assert">Delegate passed the response to be asserted.</param>
            <returns>Self Reference</returns>
        </member>
        <member name="M:NetFusion.Web.UnitTests.Hosting.WebServerAssert.ApiResponse(System.Action{NetFusion.Web.Rest.Client.ApiResponse})">
            <summary>
            Allows the response issued with the IRequestClient to be asserted.
            </summary>
            <param name="assert">Delegate passed the response to be asserted.</param>
            <returns>Self Reference</returns>
        </member>
        <member name="M:NetFusion.Web.UnitTests.Hosting.WebServerAssert.Service``1(System.Action{``0})">
            <summary>
            Allows a registered service instance to be asserted.
            </summary>
            <param name="assert">Delegate passed the service instance to be asserted.</param>
            <typeparam name="TService">The registered service type for the instance to be asserted.</typeparam>
            <returns>Self Reference</returns>
        </member>
        <member name="T:NetFusion.Web.UnitTests.Hosting.WebServerConfig">
            <summary>
            Allows the configuration of the built TestServer that can be acted on.
            </summary>
        </member>
        <member name="M:NetFusion.Web.UnitTests.Hosting.WebServerConfig.ConfigServer(System.Action{Microsoft.AspNetCore.TestHost.TestServer})">
            <summary>
            Allows any configurations to be made the the TestServer that will be used
            to run the unit-test.
            </summary>
            <param name="config">Delegate passed the TestServer instance to be configured.</param>
            <returns>Self Reference.</returns>
        </member>
        <member name="P:NetFusion.Web.UnitTests.Hosting.WebServerConfig.Act">
            <summary>
            Returns an object used to act on the create TestServer.
            </summary>
        </member>
        <member name="T:NetFusion.Web.UnitTests.Hosting.WebServerResponse">
            <summary>
            The response returned by sending an HttpRequest to the TestServer that can be asserted.
            </summary>
        </member>
        <member name="P:NetFusion.Web.UnitTests.Hosting.WebServerResponse.Assert">
            <summary>
            Allows asserting the returned server response.
            </summary>
        </member>
        <member name="T:NetFusion.Web.UnitTests.Rest.ApiMetadata.ActionTests">
            <summary>
            ASP.NET Core builds an underlying discovery model that is used to process incoming Web requests and
            for generating URLs based on a set of controller, action, and route parameters.  The ApiMetadata
            classes contain a subset of the needed metadata used by the other NetFusion web plugins.
            </summary>
        </member>
        <member name="M:NetFusion.Web.UnitTests.Rest.ApiMetadata.ActionTests.ApiAction_Metadata_Populated">
            <summary>
            The root ApiActionMeta contains the action specific information populated
            from ASP.NET Core's underlying discovery model.
            </summary>
        </member>
        <member name="M:NetFusion.Web.UnitTests.Rest.ApiMetadata.ActionTests.AssertStatusCodeWithResponse">
            <summary>
            A WebApi method can have the response status and corresponding model specified.
            </summary>
        </member>
        <member name="M:NetFusion.Web.UnitTests.Rest.ApiMetadata.ActionTests.AssertMultipleStatusCodes">
            <summary>
            A WebApi method can return more than one status code.
            </summary>
        </member>
        <member name="M:NetFusion.Web.UnitTests.Rest.ApiMetadata.ActionTests.AssertActionWithStatusCodesWithSameResponseType">
            <summary>
            Different response status codes can return the same response model.
            </summary>
        </member>
        <member name="T:NetFusion.Web.UnitTests.Rest.ApiMetadata.HeaderParameterTests">
            <summary>
            Validates the population of header parameter metadata from the underlying
            parameter descriptions discovered by the ASP.NET runtime.
            </summary>
        </member>
        <member name="T:NetFusion.Web.UnitTests.Rest.ApiMetadata.QueryParameterTests">
            <summary>
            Validates the population of query parameter metadata from the underlying
            parameter descriptions discovered by the ASP.NET runtime.
            </summary>
        </member>
        <member name="T:NetFusion.Web.UnitTests.Rest.ApiMetadata.RouteParameterTests">
            <summary>
            Validates the population of route parameter metadata from the underlying
            parameter descriptions discovered by the ASP.NET runtime.
            </summary>
        </member>
        <member name="T:NetFusion.Web.UnitTests.Rest.ClientRequests.Client.AddressModel">
            <summary>
            Client side resource class modeling the corresponding
            server side returned resource.
            </summary>
        </member>
        <member name="T:NetFusion.Web.UnitTests.Rest.ClientRequests.Client.CustomerModel">
            <summary>
            Client side resource class modeling the corresponding
            server side returned resource.
            </summary>
        </member>
        <member name="T:NetFusion.Web.UnitTests.Rest.ClientRequests.RequestHeaderTests">
            <summary>
            Unit tests for specifying header values.  Header values can be specified at the HttpClient
            level and used by all requests made by the client.  The settings can also be specified for
            a specific request.  When specified for a specific request, the request settings override
            any corresponding settings specified at the client level.
            </summary>
        </member>
        <member name="M:NetFusion.Web.UnitTests.Rest.ClientRequests.RequestHeaderTests.CanSpecifyKnown_HalDefaultSettings">
            <summary>
            A convenience method can be called to configure the settings commonly used
            for making requests to HAL based server.
            </summary>
        </member>
        <member name="M:NetFusion.Web.UnitTests.Rest.ClientRequests.RequestHeaderTests.AddingHeader_MustHaveName">
            <summary>
            The header name must be specified.
            </summary>
        </member>
        <member name="M:NetFusion.Web.UnitTests.Rest.ClientRequests.RequestHeaderTests.AddingHeader_MustHaveAtLeastOneValue">
            <summary>
            A header can contain an array of associated string values.  At least one value
            must be specified.
            </summary>
        </member>
        <member name="M:NetFusion.Web.UnitTests.Rest.ClientRequests.RequestHeaderTests.AddingHeaderWithQuality_MustBeGreaterThanZero">
            <summary>
            Certain known header types such as Accept can have a quality associated with the value
            representing the precedence of the value.
            </summary>
        </member>
        <member name="M:NetFusion.Web.UnitTests.Rest.ClientRequests.RequestHeaderTests.Header_CanHaveMultipleValues">
            <summary>
            Multiple header values can be specified.
            </summary>
        </member>
        <member name="M:NetFusion.Web.UnitTests.Rest.ClientRequests.RequestHeaderTests.AcceptHeader_CanHaveMultipleValuesWithQuality">
            <summary>
            Multiple Accept header values can be specified with specific assigned quality.
            </summary>
        </member>
        <member name="M:NetFusion.Web.UnitTests.Rest.ClientRequests.RequestHeaderTests.KnowHeaderValues_MustBeSet_UsingExplicitMethod">
            <summary>
            Certain known headers such as Accept and Content-Type must be specified using
            method provided by the RequestHeader class.  If the Add method is used, and
            exception will be raised.
            </summary>
        </member>
        <member name="M:NetFusion.Web.UnitTests.Rest.ClientRequests.RequestHeaderTests.HeaderValue_CanBeRemoved">
            <summary>
            An existing header value can be removed.
            </summary>
        </member>
        <member name="M:NetFusion.Web.UnitTests.Rest.ClientRequests.RequestHeaderTests.AuthorizationHeader_CanBeRemoved">
            <summary>
            If an authorization header was previously set, it can be removed.
            </summary>
        </member>
        <member name="M:NetFusion.Web.UnitTests.Rest.ClientRequests.RequestHeaderTests.BearerAuthorizationHeader_CanBeSet">
            <summary>
            A method exists so that a Bearer authorization token header can be set.
            </summary>
        </member>
        <member name="M:NetFusion.Web.UnitTests.Rest.ClientRequests.RequestHeaderTests.CommonSetOfSettings_CanBeMerged">
            <summary>
            Common set of headers can be merged into the headers of a request.
            If the header exists on the request, it has persistence.
            </summary>
        </member>
        <member name="T:NetFusion.Web.UnitTests.Rest.ClientRequests.RequestLinkTests">
            <summary>
            Unit-tests validating the creation and population of links on the client.
            Mostly, in HAL links are returned with the resources but the client will
            usually make a request to an entry resource to obtains entry URLs for
            loading initial resources.  Then URLs are usually template based.
            </summary>
        </member>
        <member name="M:NetFusion.Web.UnitTests.Rest.ClientRequests.RequestLinkTests.ClientCanCreateLink_ToGetEntryResource">
            <summary>
            The client will have to make one or more initial requests to entry point resources.
            This provides a starting point for client resource navigation.
            </summary>
        </member>
        <member name="M:NetFusion.Web.UnitTests.Rest.ClientRequests.RequestLinkTests.ClientCanPopulate_LinkTemplate">
            <summary>
            Resources can return links with HREF templates for given scenarios.  The client can populate
            link template tokens with specified values.  The result is a new non-template link.
            </summary>
        </member>
        <member name="M:NetFusion.Web.UnitTests.Rest.ClientRequests.RequestLinkTests.ClientMustNotPopulate_OptionalLinkTemplateTokens">
            <summary>
            Some of the link template tokens can be optional and must not be specified.  After the link
            is populated, all optional non-populated tokens are removed from the query string.
            </summary>
        </member>
        <member name="M:NetFusion.Web.UnitTests.Rest.ClientRequests.RequestLinkTests.ClientCanCreate_RequestFromLink">
            <summary>
            The client when requesting a resource with associated links submit the link
            by creating a corresponding ApiRequest object.
            </summary>
        </member>
        <member name="M:NetFusion.Web.UnitTests.Rest.ClientRequests.RequestLinkTests.CannotCreateRequest_FromTemplateLink_WithoutValues">
            <summary>
            An ApiRequest can't be created from a link containing a template unless
            the non-optional route parameters are not specified.
            </summary>
        </member>
        <member name="M:NetFusion.Web.UnitTests.Rest.ClientRequests.RequestLinkTests.CanSpecifyRouteParameters_WhenCreatedRequest_AsDictionary">
            <summary>
            When creating a request from a link containing a template based URL, 
            a dictionary can be passed with the template route values.
            </summary>
        </member>
        <member name="M:NetFusion.Web.UnitTests.Rest.ClientRequests.RequestLinkTests.CanSpecifyRouteParameters_WhenCreatedRequest_AsDynamic">
            <summary>
            When creating a request from a link containing a template based URL, 
            a dynamic type can be passed with the template route values.
            </summary>
        </member>
        <member name="M:NetFusion.Web.UnitTests.Rest.ClientRequests.RequestQueryTests.QueryStringParams_CanBeSpecified">
            <summary>
            Query string parameters to be added to the request URL can be specified.
            </summary>
        </member>
        <member name="M:NetFusion.Web.UnitTests.Rest.ClientRequests.RequestQueryTests.QueryParameters_CanBeMerged_InfoRequest">
            <summary>
            A common set of query string value can be merged into a request.
            If a query string named parameter is defined at the request level,
            it has precedence.
            </summary>
        </member>
        <member name="T:NetFusion.Web.UnitTests.Rest.ClientRequests.ResourceSerializationTests">
            <summary>
            These tests validate the property serialization of resources using the new System.Text.Json serializer.
            Resources are returned from WebApi controller methods.  These tests validate that resource wrapped
            models are correctly returned to the client.  Calling clients invoking actions on resources only
            submit back the model and not the resource.  
            </summary>
        </member>
        <member name="M:NetFusion.Web.UnitTests.Rest.ClientRequests.ResourceSerializationTests.SingleResource">
            <summary>
            A WebApi can return a single resource wrapping a model and containing
            links pertaining to the model.
            </summary>
        </member>
        <member name="M:NetFusion.Web.UnitTests.Rest.ClientRequests.ResourceSerializationTests.SingleEmbeddedResource">
            <summary>
            A WebApi can return a single resource containing a child related embedded resource.
            </summary>
        </member>
        <member name="M:NetFusion.Web.UnitTests.Rest.ClientRequests.ResourceSerializationTests.CollectionOfEmbeddedResources">
            <summary>
            A WebApi can return a resource containing an embedded collection of
            related resources.
            </summary>
        </member>
        <member name="M:NetFusion.Web.UnitTests.Rest.ClientRequests.ResourceSerializationTests.SingleEmbeddedModel">
            <summary>
            The server can also embedded a model if there is no resource related information.
            </summary>
        </member>
        <member name="M:NetFusion.Web.UnitTests.Rest.ClientRequests.ResourceSerializationTests.CollectionOfEmbeddedModels">
            <summary>
            The server can also embedded a collection of models if there is no resource related information.
            </summary>
        </member>
        <member name="M:NetFusion.Web.UnitTests.Rest.ClientRequests.ResourceTests.ClientCan_ReceiveEmbeddedResource">
            <summary>
            When receiving a resource from the server using IRequestClient, only the root resource is deserialized.
            The root resource will often have one or more embedded resources.  Embedded resources are deserialized 
            upon their first request from the underlying generalized serialized format.  All future requests for the
            embedded resource return the deserialized instance.
            </summary>
        </member>
        <member name="M:NetFusion.Web.UnitTests.Rest.ClientRequests.ResourceTests.ClientCan_ReceiveEmbeddedResourceCollection">
            <summary>
            When receiving a resource from the server using IRequestClient, only the root resource is deserialized.
            The root resource will often have one or more embedded  resource collections.  Embedded resource collections
            are deserialized upon their first request from the underlying generalized serialized format.  All future 
            requests for the embedded resource collection return the deserialized instance.
            </summary>
        </member>
        <member name="M:NetFusion.Web.UnitTests.Rest.ClientRequests.ResponseTests.CanRaiseException_ForErrorResponse_WithContent">
            <summary>
            The the server returns an error response status code with a body,
            an exception is raised.  The inner exception will have the body of
            the response.
            </summary>
        </member>
        <member name="M:NetFusion.Web.UnitTests.Rest.ClientRequests.ResponseTests.CanRaiseException_ForErrorResponse_WithNoContent">
            <summary>
            If the server returns an error response status code with no body,
            and exception is raised with a null inner exception.
            </summary>
        </member>
        <member name="T:NetFusion.Web.UnitTests.Rest.ClientRequests.Server.AddressModel">
            <summary>
            Server side resource returned by the API Controller under-test.
            </summary>
        </member>
        <member name="T:NetFusion.Web.UnitTests.Rest.ClientRequests.Server.CustomerModel">
            <summary>
            Server side resource returned by the API Controller under-test.
            </summary>
        </member>
        <member name="T:NetFusion.Web.UnitTests.Rest.ClientRequests.Server.CustomerResourceMap">
            <summary>
            Resource mapping class used by the unit-tests that will be discovered
            by the NetFusion container REST/HAL Plug-in.
            </summary>
        </member>
        <member name="M:NetFusion.Web.UnitTests.Rest.CodeGeneration.CodeGenerationApiTests.MiddlewareConfiguresRestApi_ToReadGeneratedCode">
            <summary>
            If the middleware component is added to the application builder, an WebApi
            is exposed allowing the querying of TypeScript files based on a resource name.
            </summary>
        </member>
        <member name="M:NetFusion.Web.UnitTests.Rest.CodeGeneration.CodeGenerationApiTests.UnknownResourceNameSpecified_ApiReturns404">
            <summary>
            If a TypeScript code file is queried for an unknown resource name,
            a HTTP 404 status code is returned.
            </summary>
        </member>
        <member name="T:NetFusion.Web.UnitTests.Rest.CodeGeneration.CodeGenerationTests">
            <summary>
            Contains unit tests for the plugin that generates TypeScript files from
            an WebApi's publicly exposed REST Api models.  The TypeGen nuget package
            is used to complete the actual code generation.
            </summary>
        </member>
        <member name="M:NetFusion.Web.UnitTests.Rest.CodeGeneration.CodeGenerationTests.DefaultOutputDirectory_Configured">
            <summary>
            By default, TypeScript is generated to a default named directory within the 
            base directory of the application host.  This location is also where the
            generated code files are served from.
            </summary>
        </member>
        <member name="M:NetFusion.Web.UnitTests.Rest.CodeGeneration.CodeGenerationTests.DefaultOutputDirectory_CanBeSpecified">
            <summary>
            During the bootstrapping of the application host, the directory
            containing the generated TypeScript files can be specified.
            </summary>
        </member>
        <member name="M:NetFusion.Web.UnitTests.Rest.CodeGeneration.CodeGenerationTests.TypeScriptFiles_ReturnedByDefaultEndpoint">
            <summary>
            During the bootstrap process, the UseRestCodeGen extension method can
            be invoked on IApplicationBuilder to add middleware component to the
            pipeline that will server the TypeScript files.
            </summary>
        </member>
        <member name="M:NetFusion.Web.UnitTests.Rest.CodeGeneration.CodeGenerationTests.EndpointToReadTypeScriptFiles_CanBeSpecified">
            <summary>
            The host application can specific a specific endpoint.
            </summary>
        </member>
        <member name="M:NetFusion.Web.UnitTests.Rest.CodeGeneration.CodeGenerationTests.AllExposedModels_LoadedForCodeGeneration">
            <summary>
            Models marked with the ExposedNameAttribute attribute are loaded for code generation.
            </summary>
        </member>
        <member name="M:NetFusion.Web.UnitTests.Rest.CodeGeneration.CodeGenerationTests.IfDisabled_Models_NotLoadedForCodeGeneration">
            <summary>
            When the host application is bootstrapped, code generation can be disabled.
            This can be used by the developer if the public API is not changing or if
            the build process will generate the TypeScript files.  TypeGen also has a
            CLI that can be used.
            </summary>
        </member>
        <member name="M:NetFusion.Web.UnitTests.Rest.CodeGeneration.CodeGenerationTests.ServiceAdded_ForCodeGeneration">
            <summary>
            When the plugin is bootstrapped, a module registers the IApiCodeGenService
            that can be used to retrieve the generate typescript files.
            </summary>
        </member>
        <member name="M:NetFusion.Web.UnitTests.Rest.CodeGeneration.CodeGenerationTests.CanReadGeneratedTypeScript">
            <summary>
            The IApiCodeGenService provides access for reading the generated TypeScript files.
            The names specified with the ExposedName attribute is used to lookup the code.
            </summary>
        </member>
        <member name="T:NetFusion.Web.UnitTests.Rest.CodeGeneration.Server.ApiModelOne">
            <summary>
            Example model for which code will be generated.
            </summary>
        </member>
        <member name="T:NetFusion.Web.UnitTests.Rest.CodeGeneration.Server.ApiModelTwo">
            <summary>
            Example model for which code will be generated.
            </summary>
        </member>
        <member name="T:NetFusion.Web.UnitTests.Rest.CodeGeneration.Setup.TestSetup">
            <summary>
            Common test configurations.
            </summary>
        </member>
        <member name="M:NetFusion.Web.UnitTests.Rest.CodeGeneration.Setup.TestSetup.WithDefaults(NetFusion.Core.Bootstrap.Container.CompositeContainer)">
            <summary>
            Adds to the composite container the Code-Generation Plugin and a
            Host Plugin containing two models for which code will be generated.
            </summary>
            <param name="container"></param>
        </member>
        <member name="T:NetFusion.Web.UnitTests.Rest.CodeGeneration.Setup.TestWebHostSetup">
            <summary>
            Configured TestServer bootstrapped with NetFusion.
            </summary>
        </member>
        <member name="M:NetFusion.Web.UnitTests.Rest.CodeGeneration.Setup.TestWebHostSetup.ArrangeForRestCodeGen(NetFusion.Web.UnitTests.Hosting.WebHostFixture)">
            <summary>
            Configures a TestServer bootstrapped with the Code-Generation plugin.
            Also adds two models for which TypeScript will be generated.  The
            middleware component that exposes a REST Api to query the code is
            added to the application-builder.
            </summary>
            <param name="fixture">The Web Host fixture to arrange.</param>
            <returns>Created Web Server configuration to be acted on.</returns>
        </member>
        <member name="T:NetFusion.Web.UnitTests.Rest.DocGeneration.DocConfigTests">
            <summary>
            Tests that validation the correct configuration of the plugin.
            </summary>
        </member>
        <member name="M:NetFusion.Web.UnitTests.Rest.DocGeneration.DocConfigTests.ByDefaultDescriptionFiles_LocatedInBaseDirectory">
            <summary>
            By default, the location containing any additional files used to
            add addition documentations to the returned document model are
            contained within the application host's base directory.  This
            directory, for example, can contain VS C# Code comment XML files.
            </summary>
        </member>
        <member name="M:NetFusion.Web.UnitTests.Rest.DocGeneration.DocConfigTests.BootstrapCan_Specify_FileDescriptionDirectory">
            <summary>
            When the plugin is bootstrapped, the location of description
            files can be specified.
            </summary>
        </member>
        <member name="M:NetFusion.Web.UnitTests.Rest.DocGeneration.DocConfigTests.DocumentationEndpoint_HasDefaultValue">
            <summary>
            A middleware component exposes an endpoint called by clients to
            obtain documentation for a given WebApi controller method.
            </summary>
        </member>
        <member name="M:NetFusion.Web.UnitTests.Rest.DocGeneration.DocConfigTests.BootstrapCan_Specify_DocumentationEndPoint">
            <summary>
            During the bootstrap process, the default documentation endpoint
            can be overriden.
            </summary>
        </member>
        <member name="M:NetFusion.Web.UnitTests.Rest.DocGeneration.DocConfigTests.DefaultSerializationSettingsSpecified">
            <summary>
            By default, Camel Case serialization settings are used.
            </summary>
        </member>
        <member name="M:NetFusion.Web.UnitTests.Rest.DocGeneration.DocConfigTests.SerializationSetting_CanBeSpecified">
            <summary>
            When bootstrapping, the default serialization settings can
            be overriden with custom settings.
            </summary>
        </member>
        <member name="M:NetFusion.Web.UnitTests.Rest.DocGeneration.DocConfigTests.DescriptionImplementations_SpecifiedByDefault">
            <summary>
            As the Action Document Model is being created, it will invoke
            configured classes deriving from IDocDescription.  These classes
            are responsible for adding details to the created document model.
            By default, a set of description classes are registered that will
            add comments containing within .NET code commit files.
            </summary>
        </member>
        <member name="M:NetFusion.Web.UnitTests.Rest.DocGeneration.DocConfigTests.DescriptionImplementations_Specified">
            <summary>
            The list of registered descriptions can be changed during
            bootstrapping of the host.
            </summary>
        </member>
        <member name="M:NetFusion.Web.UnitTests.Rest.DocGeneration.DocGenerationTests.DocsForWebApiMethodReturned">
            <summary>
            The comment, associated with the action method, is specified as the description
            for the returned ApiActionDoc.
            </summary>
        </member>
        <member name="M:NetFusion.Web.UnitTests.Rest.DocGeneration.DocGenerationTests.DocsForEachRouteParamReturned">
            <summary>
            When a action method has associated route parameters, the comments associated with
            the parameters are specified on each ApiParameterDoc instance.
            </summary>
        </member>
        <member name="M:NetFusion.Web.UnitTests.Rest.DocGeneration.DocGenerationTests.DocForRouteParam_IncludesDefaultValue">
            <summary>
            If a route parameter is optional and a default value is specified, the returned
            parameter document will include the default value.
            </summary>
        </member>
        <member name="M:NetFusion.Web.UnitTests.Rest.DocGeneration.DocGenerationTests.DocsForEachHeaderParamReturned">
            <summary>
            The API documentation contains the headers accepted by the REST method.
            </summary>
        </member>
        <member name="M:NetFusion.Web.UnitTests.Rest.DocGeneration.DocGenerationTests.DocForEachHeaderParam_IncludesDefaultValue">
            <summary>
            The API header documentation indicates if the header value has a default
            value that will be used if not specified.
            </summary>
        </member>
        <member name="M:NetFusion.Web.UnitTests.Rest.DocGeneration.DocGenerationTests.DocsForEachQueryParamReturned">
            <summary>
            The API documentation contains the query parameters accepted by the REST method.
            </summary>
        </member>
        <member name="M:NetFusion.Web.UnitTests.Rest.DocGeneration.DocGenerationTests.DocForEachQueryParam_IncludesDefaultValue">
            <summary>
            The API query parameter documentation indicates if the query value has
            a default value that will be used if not specified.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NetFusion.Web.UnitTests.Rest.DocGeneration.DocGenerationTests.DocsForEachPossibleStatusCodeReturned">
            <summary>
            The response documentation will include the possible status types
            returned from the WebApi action method.
            </summary>
        </member>
        <member name="M:NetFusion.Web.UnitTests.Rest.DocGeneration.DocGenerationTests.ApiModelType_CanSpecifyExposedName">
            <summary>
            Response models returned from an API can specify a name used to identity
            the response type to external consumers.   
            </summary>
        </member>
        <member name="M:NetFusion.Web.UnitTests.Rest.DocGeneration.DocGenerationTests.ApiModelTypeAndNamespace_IfNoExposedName">
            <summary>
            If a response model does not explicitly specify an external type name,
            the class name including the namespace is used.  The prior approach is
            best since the name is hard-coded and will not change if the internal
            class name is modified.
            </summary>
        </member>
        <member name="M:NetFusion.Web.UnitTests.Rest.DocGeneration.DocGenerationTests.DocsForEachResponseResourceReturned">
            <summary>
            If an API method specifies the response type and status code, both
            will be contained within the response document.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NetFusion.Web.UnitTests.Rest.DocGeneration.DocGenerationTests.DocsForEmbeddedResourceReturned">
            <summary>
            An API can specify which resources will be embedded within a parent resource.  When a resource
            has an embedded resource, the resource document will have its embedded-resources collection populated.
            </summary>
        </member>
        <member name="M:NetFusion.Web.UnitTests.Rest.DocGeneration.DocGenerationTests.DocsForEmbeddedResourceCollectionReturned">
            <summary>
            An API can specify which resources will have an embedded collection of resources.  When a collection of
            resources is embedded, the IsCollection property will be set to true.
            </summary>
        </member>
        <member name="M:NetFusion.Web.UnitTests.Rest.DocGeneration.DocGenerationTests.DocsForResourceRelationsReturned">
            <summary>
            When the documentation for a resource is built, a check is made to determine if the resource has
            any associated linked relations.  If so, documentation is returned for each relation.
            </summary>
        </member>
        <member name="M:NetFusion.Web.UnitTests.Rest.DocGeneration.DocGenerationTests.DocsForEmbeddedResources_RecursivelySet">
            <summary>
            Resources can be embedded to any nested level.  To keep APIs simple, it is best to limit the depth.
            Nevertheless, the following validates that a resource within an embedded collection containing another
            embedded single resource is correctly documented.
            </summary>
        </member>
        <member name="M:NetFusion.Web.UnitTests.Rest.DocGeneration.DocGenerationTests.DocsForActionParamPopulatedFormBody">
            <summary>
            For a controller action method that populates a resource/model from the message body,
            the resource documentation is included in the action document.
            </summary>
        </member>
        <member name="M:NetFusion.Web.UnitTests.Rest.DocGeneration.DocGenerationTests.IfNoApiDocumentFound_Http404Returned">
            <summary>
            If an API Web Url is specified for which the documentation could
            not be determined, an HTTP 404 is returned.
            </summary>
        </member>
        <member name="T:NetFusion.Web.UnitTests.Rest.DocGeneration.DocModuleTests">
            <summary>
            Contains test specific to the proper initialization and execution of the documentation
            plugin module.  The module configures documentation related components that are used when
            building a document model for a specific WebApi action method.
            </summary>
        </member>
        <member name="M:NetFusion.Web.UnitTests.Rest.DocGeneration.DocModuleTests.Module_StoresReference_ToPluginConfiguration">
            <summary>
            So other services can obtain a reference to the configuration,
            the configuration is exposed as a module property.
            </summary>
        </member>
        <member name="M:NetFusion.Web.UnitTests.Rest.DocGeneration.DocModuleTests.Module_RegistersDescriptions_AsServices">
            <summary>
            The IDocDescription classes, listed by the RestDocConfig class, are
            invoked to add additional details to the document model.  These classes
            are registered as services so they can have other services injected.
            </summary>
        </member>
        <member name="M:NetFusion.Web.UnitTests.Rest.DocGeneration.DocModuleTests.AdditionalComment_AreLoaded_FromJsonFile">
            <summary>
            Some items such as Embedded Resources and Links don't have corresponding
            documentation that can easily be specified within the .NET code generated
            XML files.  These additional comments are stored within a JSON file.
            XML files.  These additional comments are stored within a JSON file.
            </summary>
        </member>
        <member name="T:NetFusion.Web.UnitTests.Rest.DocGeneration.JsonDescriptionTests">
            <summary>
            These are tests for documentation comments that are read from an external JSON file.
            This is the case for Embedded resources and resource link relations for which no
            existing attribute exists to represent these HAL based comments.
            </summary>
        </member>
        <member name="M:NetFusion.Web.UnitTests.Rest.DocGeneration.JsonDescriptionTests.EmbeddedComment_FoundForExactMatch">
            <summary>
            The comments to associate with an embedded resource, returned from an WebApi
            controller, are stored within a JSON file.  If an entry exists based on the
            embedded name, parent resource name, and child resource names, the associated
            comment will be used.  
            </summary>
        </member>
        <member name="M:NetFusion.Web.UnitTests.Rest.DocGeneration.JsonDescriptionTests.EmbeddedComment_FoundForPartialMatch">
            <summary>
            If an exact match is not found as tested in the prior unit-test, a search is completed
            based on just the embedded name.  Of found, the associated comments are used. 
            </summary>
        </member>
        <member name="M:NetFusion.Web.UnitTests.Rest.DocGeneration.JsonDescriptionTests.RelationComment_FoundForExactMatch">
            <summary>
            When a relation document is built, the associated comment is determined based on the
            resource name containing the link and the name of the link.  
            </summary>
        </member>
        <member name="M:NetFusion.Web.UnitTests.Rest.DocGeneration.JsonDescriptionTests.RelationComment_FoundForPartialMatch">
            <summary>
            If an exact relation is not found as described in the prior unit test, then a
            search based on only the relation name is performed.
            </summary>
        </member>
        <member name="M:NetFusion.Web.UnitTests.Rest.DocGeneration.Server.DocController.TestActionComments">
            <summary>
            This is an example comment for a controller's action method.
            </summary>
            <returns>Returns a resource.</returns>
        </member>
        <member name="M:NetFusion.Web.UnitTests.Rest.DocGeneration.Server.DocController.TestActionRouteParamComments(System.String,System.Int32)">
            <summary>
            
            </summary>
            <param name="p1">First parameter comment.</param>
            <param name="p2">Second parameter comment.</param>
            <returns></returns>
        </member>
        <member name="M:NetFusion.Web.UnitTests.Rest.DocGeneration.Server.DocController.GetResourceDetails(System.String,System.Int32)">
            <summary>
            Returns details for an associated resource.
            </summary>
            <param name="id"></param>
            <param name="versionNumber"></param>
            <returns></returns>
        </member>
        <member name="M:NetFusion.Web.UnitTests.Rest.DocGeneration.Server.DocController.GetEmbeddedResourceDetails(System.String)">
            <summary>
            Returns details for an embedded associated resource.
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="T:NetFusion.Web.UnitTests.Rest.DocGeneration.Server.TestRequestModel">
            <summary>
            Example mode populated from the body of a request.
            </summary>
        </member>
        <member name="P:NetFusion.Web.UnitTests.Rest.DocGeneration.Server.TestRequestModel.FirstName">
            <summary>
            The first name read from the request body.
            </summary>
        </member>
        <member name="P:NetFusion.Web.UnitTests.Rest.DocGeneration.Server.TestRequestModel.LastName">
            <summary>
            The last name read from the request body.
            </summary>
        </member>
        <member name="T:NetFusion.Web.UnitTests.Rest.DocGeneration.Server.TestResource">
            <summary>
            Class comment for test-resource.
            </summary>
        </member>
        <member name="P:NetFusion.Web.UnitTests.Rest.DocGeneration.Server.TestResource.FirstValue">
            <summary>
            Example string property comment.
            </summary>
        </member>
        <member name="P:NetFusion.Web.UnitTests.Rest.DocGeneration.Server.TestResource.SecondValue">
            <summary>
            Example integer string property.
            </summary>
        </member>
        <member name="P:NetFusion.Web.UnitTests.Rest.DocGeneration.Server.TestResource.ThirdValue">
            <summary>
            Example property of an object type.
            </summary>
        </member>
        <member name="M:NetFusion.Web.UnitTests.Rest.DocGeneration.Server.TestResource.TestMethod">
            <summary>
            Comment associated with a method.
            </summary>
        </member>
        <member name="M:NetFusion.Web.UnitTests.Rest.DocGeneration.Server.TestResource.TestMethodWithParam(System.Int32)">
            <summary>
            Comment associated with a method.
            </summary>
            <param name="itemId">Comment associated with a parameter.</param>
        </member>
        <member name="T:NetFusion.Web.UnitTests.Rest.DocGeneration.Server.TestChildResource">
            <summary>
            Example comment for a child object type.
            </summary>
        </member>
        <member name="P:NetFusion.Web.UnitTests.Rest.DocGeneration.Server.TestChildResource.FirstValue">
            <summary>
            Example property of datetime.
            </summary>
        </member>
        <member name="M:NetFusion.Web.UnitTests.Rest.DocGeneration.XmlCommentTests.CanObtainXmlNavigator_ForAssemblyNode">
            <summary>
            Xml comments are stored in files based on the assembly for which they where generated.
            </summary>
        </member>
        <member name="M:NetFusion.Web.UnitTests.Rest.DocGeneration.XmlCommentTests.CanObtainXmlNavigator_ForTypeNode">
            <summary>
            The top most node within the comments are for types defined within the assembly. 
            </summary>
        </member>
        <member name="M:NetFusion.Web.UnitTests.Rest.DocGeneration.XmlCommentTests.CanObtainComments_ForType">
            <summary>
            If only the comment of a type is needed, this can be directly requested.
            </summary>
        </member>
        <member name="M:NetFusion.Web.UnitTests.Rest.DocGeneration.XmlCommentTests.CanObtainXmlNavigator_ForMethodNode">
            <summary>
            The XML node for a given type's method can be retrieved.
            </summary>
        </member>
        <member name="M:NetFusion.Web.UnitTests.Rest.DocGeneration.XmlCommentTests.CanObtainComments_ForMethod">
            <summary>
            The comments for a type's method can be directory requested.
            </summary>
        </member>
        <member name="M:NetFusion.Web.UnitTests.Rest.DocGeneration.XmlCommentTests.CanObtainComments_ForTypeMember">
            <summary>
            Comments for a type's property can be directly requested.
            </summary>
        </member>
        <member name="M:NetFusion.Web.UnitTests.Rest.DocGeneration.XmlCommentTests.CanObtainComments_ForMethodParameter">
            <summary>
            Given a type's method Xml comment node, the comments for a parameter can be requested.
            </summary>
        </member>
        <member name="M:NetFusion.Web.UnitTests.Rest.DocGeneration.XmlTypeCommentTests.TypeComments_AddedToDocModel">
            <summary>
            The description of a resource is set based on XML comment for that type.
            </summary>
        </member>
        <member name="M:NetFusion.Web.UnitTests.Rest.DocGeneration.XmlTypeCommentTests.TypeMemberComments_AddedToDocModel">
            <summary>
            For each resource property, the associated comments are found in the XML comments
            and specified on each property document model.
            </summary>
        </member>
        <member name="M:NetFusion.Web.UnitTests.Rest.DocGeneration.XmlTypeCommentTests.TypeMemberRequiredIndicator_SetOnDocModel">
            <summary>
            The required property is set on each resource property document model.  This is
            based on the .NET Core Required attribute and the nullability of the property's
            type.
            </summary>
        </member>
        <member name="M:NetFusion.Web.UnitTests.Rest.DocGeneration.XmlTypeCommentTests.TypeMember_CanBeOf_ArrayType">
            <summary>
            Based on the type of a resource's property, the IsArray property of the document
            model is set.
            </summary>
        </member>
        <member name="M:NetFusion.Web.UnitTests.Rest.DocGeneration.XmlTypeCommentTests.TypeMember_CanBeOf_ObjectType">
            <summary>
            If a resource property is of a complex class type, the documentation for that
            type is provided by setting the ResourceDoc property on the document model.
            NOTE:  this is a recursive process.
            </summary>
        </member>
        <member name="T:NetFusion.Web.UnitTests.Rest.LinkGeneration.Client.ClientModelStub">
            <summary>
            A model used on the client-side of the tests into which responses
            are deserialized.  When testing links, we only care about the links
            on the associated resource containing the model.  
            </summary>
        </member>
        <member name="T:NetFusion.Web.UnitTests.Rest.LinkGeneration.LinkGenerationTests">
            <summary>
            Unit-tests 
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:WebTests.Rest.LinkGeneration.LinkGenerationTests.CanGenerateUrl_ActionExpression_AllRouteParamsSupplied" -->
        <member name="M:NetFusion.Web.UnitTests.Rest.LinkGeneration.LinkGenerationTests.CanGenerateUrl_ActionExpression_WithOptionalSuppliedRouteParam">
            <summary>
            Tests the scenario where the route has an option parameter where the
            corresponding model property contains a value.
            </summary>
        </member>
        <member name="M:NetFusion.Web.UnitTests.Rest.LinkGeneration.LinkGenerationTests.CanGenerateUrl_ActionExpression_WithOptionalNotSuppliedRouteParam">
            <summary>
            Tests the scenario where the route has an optional parameter where the
            corresponding model property is null.  In this case, the optional parameter
            is not contained in the generated URL.
            </summary>
        </member>
        <member name="M:NetFusion.Web.UnitTests.Rest.LinkGeneration.LinkGenerationTests.CanGenerateUrl_ActionExpression_WithMultipleOptionalSuppliedRouteParams">
            <summary>
            Tests the scenario where the route has multiple route parameters where the
            model being returned has value for all corresponding parameters.
            </summary>
        </member>
        <member name="M:NetFusion.Web.UnitTests.Rest.LinkGeneration.LinkGenerationTests.CanGenerateUrl_ActionExpression_WithMultipleOptionalNotSuppliedRouteParams">
            <summary>
            Tests the scenario where the route has motile route parameters where the
            model being returned has null values for each corresponding parameter.
            </summary>
        </member>
        <member name="M:NetFusion.Web.UnitTests.Rest.LinkGeneration.LinkGenerationTests.CanGenerateUrl_ActionExpression_NoRouteParamsWithPostedData">
            <summary>
            Tests the scenario where the route does not have any specified parameters but the
            action method has a parameter being populated from the request message body.
            </summary>
        </member>
        <member name="M:NetFusion.Web.UnitTests.Rest.LinkGeneration.LinkGenerationTests.CanGenerateUrl_ActionExpression_RouteParamWithPostedData">
            <summary>
            Tests the scenario where the route has a parameter in addition to an action
            parameter populated from the body of the request.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:WebTests.Rest.LinkGeneration.LinkGenerationTests.CanGenerateUrl_FromHardCodedString" -->
        <!-- Badly formed XML comment ignored for member "M:WebTests.Rest.LinkGeneration.LinkGenerationTests.CanGenerateUrl_FromStringInterpolatedResourceUrl" -->
        <member name="M:NetFusion.Web.UnitTests.Rest.LinkGeneration.LinkGenerationTests.ResourceMap_CanSpecify_AdditionalOptionalLinkProperties">
            <summary>
            When specifying resource links within a resource mapping, additional optional metadata can be specified:
                - Name
                - Title
                - Type
                - HrefLang
            </summary>
        </member>
        <member name="M:NetFusion.Web.UnitTests.Rest.LinkGeneration.LinkGenerationTests.ResourceMap_CanSpecify_TemplateUrls">
            <summary>
            Where all prior examples had route parameter values specified, this scenario tests
            the case where the returned URL is template based.  In this case, the returned URL
            does not have the route parameters populated from the model properties.  Template
            based URLs are mostly used on entry resources specifying initial URLs that can be
            called to start communication with the WebApi.  Once a resource is returned, the
            majority of the returned URLs will be complete by having the route parameters set
            from properties on the returned resource's model.
            </summary>
        </member>
        <member name="M:NetFusion.Web.UnitTests.Rest.LinkGeneration.LinkGenerationTests.Client_CanSpecify_EmbeddedResources">
            <summary>
            The client can specify the embed query parameter to specify the names
            of the embedded resources to return. 
            </summary>
        </member>
        <member name="M:NetFusion.Web.UnitTests.Rest.LinkGeneration.LinkGenerationTests.Links_AreSet_OnEmbeddedResources">
            <summary>
            Setting of links are recursive.  If a parent resource contains embedded
            resources, each embedded resource will have links populated.
            </summary>
        </member>
        <member name="T:NetFusion.Web.UnitTests.Rest.LinkGeneration.Server.ResourceMap">
            <summary>
            Resource map file used by the link-generation unit-tests.  Several links are defined
            for the StateModel class.  The unit tests request the resource by making an HTTP requests
            via the RequestClient and assert the links were properly added to the returned resource. 
            </summary>
        </member>
        <member name="T:NetFusion.Web.UnitTests.Rest.LinkGeneration.Server.StateModel">
            <summary>
            Server model returned as a resource to test server-side link generation.
            </summary>
        </member>
        <member name="T:NetFusion.Web.UnitTests.Rest.Resources.CreationTests">
             <summary>
             
             Contains tests for creating resources from models.  This tests the calls
             that would exist in WebApi controllers as follow:
            
                 - The controller injects a service.
                 - The controller interacts with the server to return one or move domain entities.
                 - Domain entities are mapping into models defining the REST Api.
                 - The models are wrapped within resources containing the following:
             
                         - Embedded Resources:  Child resources related to the parent resource.
                         - Links:  These are link relations specifying how the resource relates
                                   to other resources or actions that can be taken on the resource.
                         - Embedded Models:  These are models not wrapped as a resource and therefore
                                   do not have embedded items or associated links.
            
              The HALJsonOutputFormatter checks for returned resources for which link mappings have
              been defined.  The formatter uses the metadata contained with the mappings to add links
              to the returned resources.
             
             </summary>
        </member>
        <member name="M:NetFusion.Web.UnitTests.Rest.Resources.CreationTests.Resource_Wraps_Model">
            <summary>
            A resource is just a wrapped model containing additional resource specified
            information such as links and embedded resources. 
            </summary>
        </member>
        <member name="M:NetFusion.Web.UnitTests.Rest.Resources.CreationTests.EmptyResource_WithEmbedded_Resources">
            <summary>
            The following is an example when a set of related embedded resources are
            to be returned but when there is no model associated with the parent resource.
            </summary>
        </member>
        <member name="M:NetFusion.Web.UnitTests.Rest.Resources.CreationTests.EmptyResource_WithEmbedded_ResourceCollections">
            <summary>
            The following is an example when a set of related embedded resource or
            resources collections are to be returned but when there is no model
            associated with the parent resource.
            </summary>
        </member>
        <member name="M:NetFusion.Web.UnitTests.Rest.Resources.CreationTests.Models_CanBeEmbedded_IntoResource">
            <summary>
            If a model does not have associated embedded resources and links,
            it can be directly embedded within the parent resource without
            having to wrapped within a resource.
            </summary>
        </member>
        <member name="M:NetFusion.Web.UnitTests.Rest.Resources.CreationTests.EmbeddedName_Must_BeSpecified">
            <summary>
            Embedded names must be specified and convey how the child
            resource or model is associated with the parent resource.
            </summary>
        </member>
        <member name="M:NetFusion.Web.UnitTests.Rest.Resources.CreationTests.EmbeddedNames_Must_BeUnique">
            <summary>
            Embedded names must be unique.
            </summary>
        </member>
        <member name="T:NetFusion.Web.UnitTests.Rest.Resources.Models.AccountModel">
            <summary>
            Represents a model returned from a REST Api.
            </summary>
        </member>
        <member name="T:NetFusion.Web.UnitTests.Rest.Resources.Models.PaymentModel">
            <summary>
            Represents a model returned from a REST Api.
            </summary>
        </member>
        <member name="T:NetFusion.Web.UnitTests.Rest.Resources.Models.ReminderModel">
            <summary>
            Represents a model returned from a REST Api.
            </summary>
        </member>
    </members>
</doc>
